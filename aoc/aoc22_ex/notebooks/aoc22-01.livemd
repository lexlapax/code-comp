# aoc22

```elixir
Mix.install([
  {:req, "~> 0.3.3"},
  {:req_github_oauth, "~> 0.1.0"},
  {:kino, "~> 0.8.0"}
])
```

## day 1

https://adventofcode.com/2022/day/1/input

<!-- livebook:{"break_markdown":true} -->

### part 1

```elixir
url = "https://adventofcode.com/2022/day/1/input"
# req = (Req.new(http_errors: :raise)
#   |> ReqGitHubOAuth.attach())
# resp = Req.get!(req, url: "https://api.github.com/user")
# Req.Request.put_header(req, "x-oauth-client-id", Req.Response.get_header(resp,"x-oauth-client-id"))
# input = Req.get!(req, url: url).body()
```

```elixir
input = File.read!(Path.join(__DIR__, "input01.txt"))
```

```elixir
data =
  input
  |> String.split(~r/\n\n/)
  |> Enum.map(fn str -> String.split(String.trim(str), ~r/\n/) end)
  |> Enum.map(fn lst -> Enum.map(lst, fn str -> String.to_integer(str) end) end)
  |> Enum.with_index(1)
  |> Enum.into(%{}, fn {lst, idx} -> {idx, lst} end)
```

```elixir
sums =
  data
  |> Enum.map(fn {key, lst} -> {key, Enum.reduce(lst, 0, &(&1 + &2))} end)
  |> Enum.sort_by(fn {_, sum} -> sum end, :desc)

{_, cal} = List.first(sums)
cal
```

### Part 2

```elixir
Enum.slice(sums, 0..2)
|> Enum.reduce(0, fn {_, cal}, acc -> cal + acc end)
```

## day 2

https://adventofcode.com/2022/day/2/input

<!-- livebook:{"break_markdown":true} -->

### Part 1

```elixir
input = File.read!(Path.join(__DIR__, "input02.txt"))
```

```elixir
data =
  input
  |> String.trim()
  |> String.split(~r/\n/)
  |> Enum.map(fn str -> String.split(str, ~r/\s+/) end)

data
|> Enum.reduce(0, fn [opp, self], acc ->
  case opp do
    "A" ->
      case self do
        # A = Rock = 1, # X = Rock = 1, # draw, score = 3 
        "X" -> acc + 1 + 3
        # A = Rock = 1, # Y = Paper = 2, # win, score = 6
        "Y" -> acc + 2 + 6
        # A = Rock = 1, # Z = Scissors = 3, # loss, score = 0 
        "Z" -> acc + 3
      end

    "B" ->
      case self do
        # B = Paper = 2, # X = Rock = 1, # loss, score = 0
        "X" -> acc + 1
        # B = Paper = 2, # Y = Paper = 2, # draw, score = 3
        "Y" -> acc + 2 + 3
        # B = Paper = 2, # Z = Scissor = 3, # win, score = 6
        "Z" -> acc + 3 + 6
      end

    "C" ->
      case self do
        # C = Scissor = 3, # X = Rock = 1, # win, score = 6
        "X" -> acc + 1 + 6
        # C = Scissor = 3, # Y = Paper = 2, # loss score = 0
        "Y" -> acc + 2
        # C = Scissor = 3, # Z = Scissor = 3, # draw score = 3
        "Z" -> acc + 3 + 3
      end
  end
end)
```

### Part 2

```elixir
data
|> Enum.reduce(0, fn [opp, self], acc ->
  case opp do
    "A" ->
      case self do
        # A = Rock = 1, # X = lose = 0, # choose = scissors = 3  
        "X" -> acc + 3
        # A = Rock = 1, # Y = draw = 3, # choose = rock = 1
        "Y" -> acc + 3 + 1
        # A = Rock = 1, # Z = win = 6, # choose = paper = 2
        "Z" -> acc + 6 + 2
      end

    "B" ->
      case self do
        # B = Paper = 2, # X = lose = 0, # choose = rock = 1 
        "X" -> acc + 1
        # B = Paper = 2, # Y = draw = 3, # choose = paper = 2
        "Y" -> acc + 3 + 2
        # B = Paper = 2, # Z = win = 6, # choose = scissor = 3
        "Z" -> acc + 6 + 3
      end

    "C" ->
      case self do
        # C = Scissor = 3, # X = lose = 0, # choose = paper = 2
        "X" -> acc + 2
        # C = Scissor = 3, # Y = draw = 3, # choose = scissor = 3
        "Y" -> acc + 3 + 3
        # C = Scissor = 3, # Z = win = 6, # choose = rock = 1
        "Z" -> acc + 6 + 1
      end
  end
end)
```

## day 3

url = https://adventofcode.com/2022/day/3/input

```elixir
input = File.read!(Path.join(__DIR__, "input03.txt"))
```

```elixir
str = "dWlhclDHdFvDCCDfFq"
strlen = String.length(str)
{c1, c2} = String.split_at(str, div(strlen, 2))
s1 = MapSet.new(String.codepoints(c1))
s2 = MapSet.new(String.codepoints(c2))
MapSet.intersection(s1, s2)
```

```elixir
data =
  input
  |> String.trim()
  |> String.split(~r/\n/)
  |> Enum.into([], fn str ->
    strlen = String.length(str)
    {c1, c2} = String.split_at(str, div(strlen, 2))
    s1 = MapSet.new(String.codepoints(c1))
    s2 = MapSet.new(String.codepoints(c2))
    common = List.first(MapSet.to_list(MapSet.intersection(s1, s2)))
    [{c1, c2}, common]
  end)
```

```elixir
lowers = Enum.map(97..(97 + 25), fn x -> <<x>> end) |> Enum.with_index(1) |> Enum.into(%{})
uppers = Enum.map(65..(65 + 25), fn x -> <<x>> end) |> Enum.with_index(27) |> Enum.into(%{})
p_map = Map.merge(uppers, lowers)
```

### Part 1

```elixir
priorities =
  data
  |> Enum.into([], fn [{_, _}, common] -> Map.get(p_map, common) end)
  |> Enum.reduce(0, &(&1 + &2))
```

### Part 2

```elixir
data =
  input
  |> String.trim()
  |> String.split(~r/\n/)
  |> Enum.chunk_every(3)
  |> Enum.into([], fn [stra, strb, strc] ->
    s_a = MapSet.new(String.codepoints(stra))
    s_b = MapSet.new(String.codepoints(strb))
    s_c = MapSet.new(String.codepoints(strc))

    MapSet.intersection(s_c, MapSet.intersection(s_a, s_b))
    |> MapSet.to_list()
    |> List.first()
  end)

data
|> Enum.map(fn x -> Map.get(p_map, x) end)
|> Enum.reduce(0, &(&1 + &2))
```

## day 4

https://adventofcode.com/2022/day/4/input

```elixir
input = File.read!(Path.join(__DIR__, "input04.txt"))
```

```elixir
data = input |> String.trim() |> String.split(~r/\n/)
```

```elixir
data =
  data
  |> Enum.map(fn str ->
    [_, rf1, rf2, rs1, rs2] = Regex.run(~r/(\d+)-(\d+),(\d+)-(\d+)/, str)

    {Range.new(String.to_integer(rf1), String.to_integer(rf2)),
     Range.new(String.to_integer(rs1), String.to_integer(rs2))}
  end)
```

### Part 1

```elixir
r1 = Range.new(7,41)
r2 = Range.new(8,79)
#return x1 <= y2 and y1 <= x2
r1.first <= r2.last and r2.first <= r1.last
defmodule Util do
  def range_subset(range1, range2) do
    """Whether range1 is a subset of range2."""
    if not range1:
        return True  # empty range is subset of anything
    if not range2:
        return False  # non-empty range can't be subset of empty range
    if len(range1) > 1 and range1.step % range2.step:
        return False  # must have a single value or integer multiple step
    return range1.start in range2 and range1[-1] in range2
end
```

```elixir
data
|> Enum.filter(fn {r1, r2} -> not Range.disjoint?(r1, r2) end)
```
